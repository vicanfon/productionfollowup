/**
 * vf-OS relational storage service
 * This is the vf-OS service for storing relational data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: osaiz@ikerlan.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

let ApiClient = require('../../api_client.js');
let ColumnDefinition = require('./ColumnDefinition');
let ConstraintDefinition = require('./ConstraintDefinition');
let EntityRename = require('./EntityRename');


/**
 * The TableAlteration model module.
 * @module model/TableAlteration
 * @version 1.0.0
 */
let TableAlteration = function () {


    /**
     * Constructs a <code>TableAlteration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableAlteration} obj Optional instance to populate.
     * @return {module:model/TableAlteration} The populated <code>TableAlteration</code> instance.
     */
    this.constructFromObject = function (data, obj) {
        if (data) {
            obj = obj || new TableAlteration();


            if (data.hasOwnProperty('new_table_name')) {
                obj['new_table_name'] = ApiClient.convertToType(data['new_table_name'], 'String');
            }
            if (data.hasOwnProperty('column_rename')) {
                obj['column_rename'] = EntityRename.constructFromObject(data['column_rename']);
            }
            if (data.hasOwnProperty('columns_to_add')) {
                obj['columns_to_add'] = ApiClient.convertToType(data['columns_to_add'], [ColumnDefinition]);
            }
            if (data.hasOwnProperty('columns_to_alter')) {
                obj['columns_to_alter'] = ApiClient.convertToType(data['columns_to_alter'], [ColumnDefinition]);
            }
            if (data.hasOwnProperty('columns_to_delete')) {
                obj['columns_to_delete'] = ApiClient.convertToType(data['columns_to_delete'], ['String']);
            }
            if (data.hasOwnProperty('constraints_to_add')) {
                obj['constraints_to_add'] = ApiClient.convertToType(data['constraints_to_add'], [ConstraintDefinition]);
            }
            if (data.hasOwnProperty('constraints_to_delete')) {
                obj['constraints_to_delete'] = ApiClient.convertToType(data['constraints_to_delete'], ['String']);
            }
        }
        return obj;
    }

    /**
     * New table name. Used to rename a table. Incompatible with other parameters.
     * @member {String} new_table_name
     */
    this.new_table_name = undefined;
    /**
     * @member {module:model/EntityRename} column_rename
     */
    this.column_rename = undefined;
    /**
     * List of columns to be added to the table
     * @member {Array.<module:model/ColumnDefinition>} columns_to_add
     */
    this.columns_to_add = undefined;
    /**
     * List of columns to be altered
     * @member {Array.<module:model/ColumnDefinition>} columns_to_alter
     */
    this.columns_to_alter = undefined;
    /**
     * List of columns to be deleted. Example [\"col1\", \"col2\"]
     * @member {Array.<String>} columns_to_delete
     */
    this.columns_to_delete = undefined;
    /**
     * List of constraints to be added to the table
     * @member {Array.<module:model/ConstraintDefinition>} constraints_to_add
     */
    this.constraints_to_add = undefined;
    /**
     * List of constraints to be deleted
     * @member {Array.<String>} constraints_to_delete
     */
    this.constraints_to_delete = undefined;

}



module.exports = new TableAlteration();