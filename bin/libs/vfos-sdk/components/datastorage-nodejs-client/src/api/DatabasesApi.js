/**
 * vf-OS relational storage service
 * This is the vf-OS service for storing relational data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: osaiz@ikerlan.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

let ApiClient = require("../../api_client");
let Error = require('../model/Error');

/**
 * Databases service.
 * @module api/DatabasesApi
 * @version 1.0.0
 */
let DatabasesApi = function () {

  /**
   * Constructs a new DatabasesApi. 
   * @alias module:api/DatabasesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */

  this.apiClient = ApiClient;
  this.init = function (apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }


  /**
   * Callback function to receive the result of the addDatabase operation.
   * @callback module:api/DatabasesApi~addDatabaseCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Error} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Creates a new relational database
   * @param {String} database Database name to be created
   * @param {String} authorization Http Basic authorization
   * @param {module:api/DatabasesApi~addDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Error}
   */
  this.addDatabase = function(database, authorization, callback) {
    let postBody = database;

    // verify the required parameter 'database' is set
    if (database === undefined || database === null) {
      throw new Error("Missing the required parameter 'database' when calling addDatabase");
    }

    // verify the required parameter 'authorization' is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter 'authorization' when calling addDatabase");
    }


    let pathParams = {};
    let queryParams = {};
    let headerParams = {
      'Authorization': authorization
    };
    let formParams = {};

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Error;

    return this.apiClient.callApi(
      '/databases', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }

  /**
   * Callback function to receive the result of the dropDatabase operation.
   * @callback module:api/DatabasesApi~dropDatabaseCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Error} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Drops an existing relational database
   * @param {String} databaseName Database name to be deleted
   * @param {String} authorization Http Basic authorization
   * @param {module:api/DatabasesApi~dropDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Error}
   */
  this.dropDatabase = function(databaseName, authorization, callback) {
    let postBody = null;

    // verify the required parameter 'databaseName' is set
    if (databaseName === undefined || databaseName === null) {
      throw new Error("Missing the required parameter 'databaseName' when calling dropDatabase");
    }

    // verify the required parameter 'authorization' is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter 'authorization' when calling dropDatabase");
    }


    let pathParams = {
      'databaseName': databaseName
    };
    let queryParams = {};
    let headerParams = {
      'Authorization': authorization
    };
    let formParams = {};

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Error;

    return this.apiClient.callApi(
      '/databases/{databaseName}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }


}

module.exports = new DatabasesApi()