/**
 * vf-OS relational storage service
 * This is the vf-OS service for storing relational data. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: osaiz@ikerlan.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


let ApiClient = require("../../api_client");
let Error = require('../model/Error');
let IndexDefinition = require('../model/IndexDefinition');
let ListOfStringAndError = require('../model/ListOfStringAndError');
let ViewDescriptionAndError = require('../model/ViewDescriptionAndError');

/**
 * Indexes service.
 * @module api/IndexesApi
 * @version 1.0.0
 */
let IndexesApi = function () {
  this.apiClient = ApiClient;
  this.init = function (apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }


  /**
   * Callback function to receive the result of the addIndex operation.
   * @callback module:api/IndexesApi~addIndexCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Error} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Creates a new index on a relational table
   * @param {String} databaseName Database name
   * @param {String} tableName Table name
   * @param {module:model/IndexDefinition} indexDef Index definition
   * @param {String} authorization Http Basic authorization
   * @param {module:api/IndexesApi~addIndexCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Error}
   */
  this.addIndex = function (databaseName, tableName, indexDef, authorization, callback) {
    let postBody = indexDef;

    // verify the required parameter 'databaseName' is set
    if (databaseName === undefined || databaseName === null) {
      throw new Error("Missing the required parameter 'databaseName' when calling addIndex");
    }

    // verify the required parameter 'tableName' is set
    if (tableName === undefined || tableName === null) {
      throw new Error("Missing the required parameter 'tableName' when calling addIndex");
    }

    // verify the required parameter 'indexDef' is set
    if (indexDef === undefined || indexDef === null) {
      throw new Error("Missing the required parameter 'indexDef' when calling addIndex");
    }

    // verify the required parameter 'authorization' is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter 'authorization' when calling addIndex");
    }


    let pathParams = {
      'databaseName': databaseName,
      'tableName': tableName
    };
    let queryParams = {};
    let headerParams = {
      'Authorization': authorization
    };
    let formParams = {};

    let authNames = ['basicAuth'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Error;

    return this.apiClient.callApi(
      '/databases/{databaseName}/tables/{tableName}/indexes', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }

  /**
   * Callback function to receive the result of the describeIndex operation.
   * @callback module:api/IndexesApi~describeIndexCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ViewDescriptionAndError} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Gets a description of a index of a given relational database
   * @param {String} databaseName Database name
   * @param {String} tableName Table name
   * @param {String} indexName Index name
   * @param {String} authorization Http Basic authorization
   * @param {module:api/IndexesApi~describeIndexCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ViewDescriptionAndError}
   */
  this.describeIndex = function (databaseName, tableName, indexName, authorization, callback) {
    let postBody = null;

    // verify the required parameter 'databaseName' is set
    if (databaseName === undefined || databaseName === null) {
      throw new Error("Missing the required parameter 'databaseName' when calling describeIndex");
    }

    // verify the required parameter 'tableName' is set
    if (tableName === undefined || tableName === null) {
      throw new Error("Missing the required parameter 'tableName' when calling describeIndex");
    }

    // verify the required parameter 'indexName' is set
    if (indexName === undefined || indexName === null) {
      throw new Error("Missing the required parameter 'indexName' when calling describeIndex");
    }

    // verify the required parameter 'authorization' is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter 'authorization' when calling describeIndex");
    }


    let pathParams = {
      'databaseName': databaseName,
      'tableName': tableName,
      'indexName': indexName
    };
    let queryParams = {};
    let headerParams = {
      'Authorization': authorization
    };
    let formParams = {};

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ViewDescriptionAndError;

    return this.apiClient.callApi(
      '/databases/{databaseName}/tables/{tableName}/indexes/{indexName}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }

  /**
   * Callback function to receive the result of the dropIndex operation.
   * @callback module:api/IndexesApi~dropIndexCallback
   * @param {String} error Error message, if any.
   * @param {module:model/Error} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Drops an existing relational index of a table
   * @param {String} databaseName Database name
   * @param {String} tableName Table name
   * @param {String} indexName Index name
   * @param {String} authorization Http Basic authorization
   * @param {module:api/IndexesApi~dropIndexCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/Error}
   */
  this.dropIndex = function (databaseName, tableName, indexName, authorization, callback) {
    let postBody = null;

    // verify the required parameter 'databaseName' is set
    if (databaseName === undefined || databaseName === null) {
      throw new Error("Missing the required parameter 'databaseName' when calling dropIndex");
    }

    // verify the required parameter 'tableName' is set
    if (tableName === undefined || tableName === null) {
      throw new Error("Missing the required parameter 'tableName' when calling dropIndex");
    }

    // verify the required parameter 'indexName' is set
    if (indexName === undefined || indexName === null) {
      throw new Error("Missing the required parameter 'indexName' when calling dropIndex");
    }

    // verify the required parameter 'authorization' is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter 'authorization' when calling dropIndex");
    }


    let pathParams = {
      'databaseName': databaseName,
      'tableName': tableName,
      'indexName': indexName
    };
    let queryParams = {};
    let headerParams = {
      'Authorization': authorization
    };
    let formParams = {};

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Error;

    return this.apiClient.callApi(
      '/databases/{databaseName}/tables/{tableName}/indexes/{indexName}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }

  /**
   * Callback function to receive the result of the listTableIndexes operation.
   * @callback module:api/IndexesApi~listTableIndexesCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ListOfStringAndError} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Gets the list of indexes of a given relational database table
   * @param {String} databaseName Database name
   * @param {String} tableName Table name
   * @param {String} authorization Http Basic authorization
   * @param {module:api/IndexesApi~listTableIndexesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ListOfStringAndError}
   */
  this.listTableIndexes = function (databaseName, tableName, authorization, callback) {
    let postBody = null;

    // verify the required parameter 'databaseName' is set
    if (databaseName === undefined || databaseName === null) {
      throw new Error("Missing the required parameter 'databaseName' when calling listTableIndexes");
    }

    // verify the required parameter 'tableName' is set
    if (tableName === undefined || tableName === null) {
      throw new Error("Missing the required parameter 'tableName' when calling listTableIndexes");
    }

    // verify the required parameter 'authorization' is set
    if (authorization === undefined || authorization === null) {
      throw new Error("Missing the required parameter 'authorization' when calling listTableIndexes");
    }


    let pathParams = {
      'databaseName': databaseName,
      'tableName': tableName
    };
    let queryParams = {};
    let headerParams = {
      'Authorization': authorization
    };
    let formParams = {};

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ListOfStringAndError;

    return this.apiClient.callApi(
      '/databases/{databaseName}/tables/{tableName}/indexes', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
}


module.exports = new IndexesApi();